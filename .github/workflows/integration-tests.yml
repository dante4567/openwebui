name: Integration Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'docker-compose.yml'
      - 'todoist-tool/**'
      - 'caldav-tool/**'
      - 'test-gtd-stack.sh'
      - '.github/workflows/integration-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-compose.yml'
      - 'todoist-tool/**'
      - 'caldav-tool/**'
      - 'test-gtd-stack.sh'
  workflow_dispatch:  # Allow manual trigger

jobs:
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up environment
      run: |
        # Create minimal .env file for testing
        cat > .env << EOF
        WEBUI_SECRET_KEY=$(openssl rand -hex 32)
        OPENAI_API_KEY=test-key
        GROQ_API_KEY=test-key
        ANTHROPIC_API_KEY=test-key
        GOOGLE_API_KEY=test-key
        TODOIST_API_KEY=test-key
        CALDAV_URL=https://caldav.example.com
        CALDAV_USERNAME=testuser
        CALDAV_PASSWORD=testpass
        EOF

    - name: Build Docker images
      run: |
        docker-compose build todoist-tool caldav-tool

    - name: Start services
      run: |
        # Start only the GTD tool containers (not full stack)
        docker-compose up -d todoist-tool caldav-tool

        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 10

    - name: Test tool health endpoints
      run: |
        echo "Testing Todoist tool health..."
        curl -f http://localhost:8007/ || exit 1

        echo "Testing CalDAV tool health..."
        curl -f http://localhost:8008/ || exit 1

        echo "✅ All tool health checks passed"

    - name: Check tool logs
      if: always()
      run: |
        echo "=== Todoist Tool Logs ==="
        docker-compose logs todoist-tool

        echo "=== CalDAV Tool Logs ==="
        docker-compose logs caldav-tool

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  config-validation:
    name: Configuration Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate docker-compose.yml
      run: |
        docker-compose config > /dev/null
        echo "✅ docker-compose.yml is valid"

    - name: Check for secrets in code
      run: |
        # Check for accidentally committed API keys
        if grep -r "sk-proj-" --exclude-dir=.git --exclude="*.md" .; then
          echo "❌ Found potential OpenAI API key in code"
          exit 1
        fi

        if grep -r "gsk_" --exclude-dir=.git --exclude="*.md" .; then
          echo "❌ Found potential Groq API key in code"
          exit 1
        fi

        if grep -r "sk-ant-api" --exclude-dir=.git --exclude="*.md" .; then
          echo "❌ Found potential Anthropic API key in code"
          exit 1
        fi

        echo "✅ No hardcoded API keys found"

    - name: Check .env.example exists
      run: |
        if [ ! -f .env.example ]; then
          echo "❌ .env.example is missing"
          exit 1
        fi
        echo "✅ .env.example exists"

    - name: Validate Python syntax
      run: |
        python3 -m py_compile todoist-tool/main.py
        python3 -m py_compile caldav-tool/main.py
        echo "✅ Python syntax is valid"

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check required documentation
      run: |
        required_docs=(
          "README.md"
          "CLAUDE.md"
          ".env.example"
          "docker-compose.yml"
        )

        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ Missing required documentation: $doc"
            exit 1
          fi
        done

        echo "✅ All required documentation exists"

    - name: Check for broken markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
      continue-on-error: true
