name: Integration Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'docker-compose.yml'
      - 'todoist-tool/**'
      - 'caldav-tool/**'
      - 'test-gtd-stack.sh'
      - '.github/workflows/integration-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-compose.yml'
      - 'todoist-tool/**'
      - 'caldav-tool/**'
      - 'test-gtd-stack.sh'
  workflow_dispatch:  # Allow manual trigger

jobs:
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up environment
      run: |
        # Create minimal .env file for testing
        cat > .env << EOF
        WEBUI_SECRET_KEY=$(openssl rand -hex 32)
        OPENAI_API_KEY=test-key
        GROQ_API_KEY=test-key
        ANTHROPIC_API_KEY=test-key
        GOOGLE_API_KEY=test-key
        TODOIST_API_KEY=test-key
        CALDAV_URL=https://caldav.example.com
        CALDAV_USERNAME=testuser
        CALDAV_PASSWORD=testpass
        EOF

    - name: Build Docker images
      run: |
        docker compose build todoist-tool caldav-tool

    - name: Start services
      run: |
        # Start only the GTD tool containers (not full stack)
        docker compose up -d todoist-tool caldav-tool

        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 10

    - name: Test tool health endpoints
      run: |
        echo "Testing Todoist tool health..."
        curl -f http://localhost:8007/ || exit 1

        echo "Testing CalDAV tool health..."
        curl -f http://localhost:8008/ || exit 1

        echo "✅ All tool health checks passed"

    - name: Check tool logs
      if: always()
      run: |
        echo "=== Todoist Tool Logs ==="
        docker compose logs todoist-tool

        echo "=== CalDAV Tool Logs ==="
        docker compose logs caldav-tool

    - name: Stop services
      if: always()
      run: |
        docker compose down -v

  openwebui-validation:
    name: OpenWebUI Configuration Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        # Create .env file for OpenWebUI testing
        cat > .env << EOF
        WEBUI_SECRET_KEY=$(openssl rand -hex 32)
        OPENAI_API_KEY=test-key
        GROQ_API_KEY=test-key
        ANTHROPIC_API_KEY=test-key
        GOOGLE_API_KEY=test-key
        TODOIST_API_KEY=test-key
        CALDAV_URL=https://caldav.example.com
        CALDAV_USERNAME=testuser
        CALDAV_PASSWORD=testpass
        EOF

    - name: Start OpenWebUI stack
      run: |
        # Start full GTD stack
        docker compose up -d openwebui filesystem-tool git-tool todoist-tool caldav-tool

        # Wait for OpenWebUI to be ready (can take 60-90 seconds)
        echo "Waiting for OpenWebUI to start..."
        for i in {1..30}; do
          if curl -s -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "✅ OpenWebUI is ready"
            break
          fi
          echo "Attempt $i/30: OpenWebUI not ready yet..."
          sleep 3
        done

    - name: Validate OpenWebUI API
      run: |
        echo "Testing OpenWebUI API health..."

        # Check main endpoint
        if ! curl -s -f http://localhost:8080/api/health > /dev/null 2>&1; then
          # Try alternate health check
          if ! curl -s -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "❌ OpenWebUI API is not responding"
            exit 1
          fi
        fi

        echo "✅ OpenWebUI API is responding"

    - name: Check OpenWebUI configuration
      run: |
        echo "Checking OpenWebUI configuration..."

        # Check if we can access the API
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/config)

        if [ "$response" = "200" ] || [ "$response" = "401" ]; then
          echo "✅ OpenWebUI API is accessible (status: $response)"
        else
          echo "⚠️  OpenWebUI API returned unexpected status: $response"
          echo "   This may be expected if authentication is required"
        fi

    - name: Verify tool registration
      run: |
        echo "Checking tool server connectivity from OpenWebUI container..."

        # Test each tool from inside OpenWebUI container
        docker exec openwebui curl -s -f http://filesystem-tool:8000/docs > /dev/null && echo "✅ Filesystem tool accessible" || echo "❌ Filesystem tool NOT accessible"
        docker exec openwebui curl -s -f http://git-tool:8000/docs > /dev/null && echo "✅ Git tool accessible" || echo "❌ Git tool NOT accessible"
        docker exec openwebui curl -s -f http://todoist-tool:8000/ > /dev/null && echo "✅ Todoist tool accessible" || echo "❌ Todoist tool NOT accessible"
        docker exec openwebui curl -s -f http://caldav-tool:8000/ > /dev/null && echo "✅ CalDAV tool accessible" || echo "❌ CalDAV tool NOT accessible"

    - name: Query OpenWebUI database configuration
      run: |
        echo "Querying OpenWebUI database for configuration..."

        if ! docker exec openwebui test -f /app/backend/data/webui.db; then
          echo "⚠️  OpenWebUI database not found at expected location"
          exit 0
        fi

        echo "✅ OpenWebUI database exists at /app/backend/data/webui.db"
        echo ""

        # Install sqlite3 in container if needed
        docker exec openwebui bash -c "apt-get update -qq && apt-get install -y -qq sqlite3 > /dev/null 2>&1" || echo "   (Could not install sqlite3)"

        echo "=== Database Tables ==="
        docker exec openwebui sqlite3 /app/backend/data/webui.db ".tables"
        echo ""

        echo "=== Configuration Settings ==="
        docker exec openwebui sqlite3 /app/backend/data/webui.db "SELECT * FROM config LIMIT 10;" 2>/dev/null || echo "   (No config table found)"
        echo ""

        echo "=== User Accounts ==="
        docker exec openwebui sqlite3 /app/backend/data/webui.db "SELECT id, name, email, role, created_at FROM user;" 2>/dev/null || echo "   (No users yet - expected for fresh install)"
        echo ""

        echo "=== Tool/Function Registrations ==="
        docker exec openwebui sqlite3 /app/backend/data/webui.db "SELECT id, name, type FROM tool;" 2>/dev/null || echo "   (No tools table or no tools registered yet)"
        docker exec openwebui sqlite3 /app/backend/data/webui.db "SELECT id, name, type FROM function;" 2>/dev/null || echo "   (No functions table)"
        echo ""

        echo "=== Model Configuration ==="
        docker exec openwebui sqlite3 /app/backend/data/webui.db "SELECT * FROM model;" 2>/dev/null || echo "   (No models table)"
        echo ""

        echo "=== Prompts ==="
        docker exec openwebui sqlite3 /app/backend/data/webui.db "SELECT id, command, title FROM prompt LIMIT 5;" 2>/dev/null || echo "   (No prompts table or no prompts configured)"

    - name: Check OpenWebUI logs for errors
      if: always()
      run: |
        echo "=== OpenWebUI Logs (last 50 lines) ==="
        docker compose logs --tail=50 openwebui

        echo ""
        echo "=== Checking for critical errors ==="
        if docker compose logs openwebui | grep -i "error" | grep -v "no error" | head -10; then
          echo "⚠️  Found error messages in logs (review above)"
        else
          echo "✅ No critical errors found in logs"
        fi

    - name: Stop OpenWebUI stack
      if: always()
      run: |
        docker compose down -v

  config-validation:
    name: Configuration Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up environment for validation
      run: |
        # Create minimal .env for docker-compose validation
        cat > .env << EOF
        WEBUI_SECRET_KEY=test-key-for-validation
        OPENAI_API_KEY=test-key
        GROQ_API_KEY=test-key
        ANTHROPIC_API_KEY=test-key
        GOOGLE_API_KEY=test-key
        TODOIST_API_KEY=test-key
        CALDAV_URL=https://caldav.example.com
        CALDAV_USERNAME=testuser
        CALDAV_PASSWORD=testpass
        EOF

    - name: Validate docker-compose.yml
      run: |
        docker compose config > /dev/null
        echo "✅ docker-compose.yml is valid"

    - name: Check for secrets in code
      run: |
        # Check for accidentally committed API keys
        # Exclude .github (contains these patterns in CI checks) and .md files
        if grep -r "sk-proj-" --exclude-dir=.git --exclude-dir=.github --exclude="*.md" .; then
          echo "❌ Found potential OpenAI API key in code"
          exit 1
        fi

        if grep -r "gsk_" --exclude-dir=.git --exclude-dir=.github --exclude="*.md" .; then
          echo "❌ Found potential Groq API key in code"
          exit 1
        fi

        if grep -r "sk-ant-api" --exclude-dir=.git --exclude-dir=.github --exclude="*.md" .; then
          echo "❌ Found potential Anthropic API key in code"
          exit 1
        fi

        echo "✅ No hardcoded API keys found"

    - name: Check .env.example exists
      run: |
        if [ ! -f .env.example ]; then
          echo "❌ .env.example is missing"
          exit 1
        fi
        echo "✅ .env.example exists"

    - name: Validate Python syntax
      run: |
        python3 -m py_compile todoist-tool/main.py
        python3 -m py_compile caldav-tool/main.py
        echo "✅ Python syntax is valid"

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check required documentation
      run: |
        required_docs=(
          "README.md"
          "CLAUDE.md"
          ".env.example"
          "docker-compose.yml"
        )

        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ Missing required documentation: $doc"
            exit 1
          fi
        done

        echo "✅ All required documentation exists"

    - name: Check for broken markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
      continue-on-error: true
